'use strict';

var getReferences = require('style-dictionary/lib/utils/references/getReferences.js');
var usesReference = require('style-dictionary/lib/utils/references/usesReference.js');
var transformFontWeights = require('../transformFontWeights.cjs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var getReferences__default = /*#__PURE__*/_interopDefault(getReferences);
var usesReference__default = /*#__PURE__*/_interopDefault(usesReference);

// @ts-expect-error no type exported for this function
function recurse(slice, boundGetRef, alwaysAddFontStyle = false) {
    for (const key in slice) {
        const token = slice[key];
        if (typeof token !== 'object' || token === null) {
            continue;
        }
        const { type, value } = token;
        if (type === 'typography') {
            if (typeof value !== 'object') {
                continue;
            }
            let fontWeight = value.fontWeight;
            if (usesReference__default.default(fontWeight)) {
                let ref = { value: fontWeight };
                while (ref && ref.value && typeof ref.value === 'string' && usesReference__default.default(ref.value)) {
                    try {
                        ref = Object.fromEntries(Object.entries(boundGetRef(ref.value)[0]).map(([k, v]) => [k, v]));
                    }
                    catch (e) {
                        console.warn(`Warning: could not resolve reference ${ref.value}`);
                        return;
                    }
                }
                fontWeight = ref.value;
            }
            // cast it to TokenTypographyValue now that we've resolved references all the way, we know it cannot be a string anymore.
            // fontStyle is a prop we add ourselves
            const tokenValue = value;
            if (fontWeight) {
                const fontStyleMatch = fontWeight.match(transformFontWeights.fontWeightReg);
                if (fontStyleMatch?.groups?.weight && fontStyleMatch.groups.style) {
                    tokenValue.fontStyle = fontStyleMatch.groups.style.toLowerCase();
                    tokenValue.fontWeight = fontStyleMatch?.groups?.weight;
                }
                // Roboto Regular Italic might have only: `fontWeight: 'Italic'`
                // which means that the weight is Regular and the style is Italic
                if (transformFontWeights.fontStyles.includes(fontWeight.toLowerCase())) {
                    tokenValue.fontStyle = fontWeight.toLowerCase();
                    tokenValue.fontWeight = 'Regular';
                }
            }
            if (!tokenValue.fontStyle && alwaysAddFontStyle) {
                tokenValue.fontStyle = 'normal';
            }
        }
        else if (typeof token === 'object') {
            recurse(token, boundGetRef, alwaysAddFontStyle);
        }
    }
}
function addFontStyles(dictionary, transformOpts) {
    const copy = { ...dictionary };
    const boundGetRef = getReferences__default.default.bind({ properties: copy });
    recurse(copy, boundGetRef, transformOpts?.alwaysAddFontStyle);
    return copy;
}

exports.addFontStyles = addFontStyles;
